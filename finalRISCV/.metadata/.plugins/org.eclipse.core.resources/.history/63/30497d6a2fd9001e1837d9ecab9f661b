#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xgpio.h"

int main()
{
    init_platform();
    XGpio ALU, PC, INST;
    int ALU_VAL, PC_val, INST_VAL;
    int prev_PC_val = -1; // Initialize with a value that won't be in the actual range

    // Initialize
    XGpio_Initialize(&ALU, XPAR_AXI_GPIO_ALU_DEVICE_ID);
    XGpio_Initialize(&INST, XPAR_AXI_GPIO_INST_DEVICE_ID);
    XGpio_Initialize(&PC, XPAR_AXI_GPIO_PC_DEVICE_ID);

    // Set direction
    XGpio_SetDataDirection(&ALU, 1, 1);
    XGpio_SetDataDirection(&INST, 1, 1);
    XGpio_SetDataDirection(&PC, 1, 1);

    while (1) {
        // Read values
        ALU_VAL = XGpio_DiscreteRead(&ALU, 1);
        PC_val = XGpio_DiscreteRead(&PC, 1);
        INST_VAL = XGpio_DiscreteRead(&INST, 1);

        // Check if PC_val has changed
        if (PC_val != prev_PC_val) {
            // Print the PC value with a new line
            xil_printf("PC value changed: %d\n\r", PC_val);
            prev_PC_val = PC_val; // Update previous value

            // Print the ALU value
            xil_printf("ALU value: %d\n\r", ALU_VAL);

            // Extract opcode (last 7 bits)
            int opcode = (INST_VAL >> 25) & 0b1111111;
            // Extract rd (next 5 bits)
            int rd = (INST_VAL >> 20) & 0b11111;
            // Extract funct3 (next 3 bits)
            int funct3 = (INST_VAL >> 17) & 0b111;
            // Extract rs1 (next 5 bits)
            int rs1 = (INST_VAL >> 12) & 0b11111;
            // Extract rs2 (next 5 bits)
            int rs2 = (INST_VAL >> 7) & 0b11111;

            // Print extracted values
            xil_printf("Opcode: %d, rd: %d, funct3: %d, rs1: %d, rs2: %d\n\r", opcode, rd, funct3, rs1, rs2);
        }
    }

    cleanup_platform();
    return 0;
}
